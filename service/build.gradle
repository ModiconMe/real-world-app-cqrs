plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

println "${project.getParent().projectDir}/frontend"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation project(':service-bus')
    implementation project(':service-api')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation "org.springframework.cloud:spring-cloud-starter-openfeign:${openFeignVersion}"
    testImplementation "io.github.openfeign:feign-jackson:${jacksonFeignVersion}"
}

test {
    useJUnitPlatform()
}

apply plugin: 'com.github.node-gradle.node'

node {
    version = "18.13.0"
    download = false
    workDir = file("${project.getParent().projectDir}/frontend/nodejs")
    npmWorkDir = file("${project.getParent().projectDir}/frontend/npm")
    nodeModulesDir = file("${project.getParent().projectDir}/frontend")
}

processResources{
    dependsOn 'copyFrontendToBuild'
}

task npmInstall2(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = "${project.getParent().projectDir}/frontend"
    }
    args = ['install']
}

task npmShowVersion(type: NpmTask) {
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = "${project.getParent().projectDir}/frontend"
    }
    args = ['--version']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstall2'
    execOverrides {
        it.workingDir = "${project.getParent().projectDir}/frontend"
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    from "${project.getParent().projectDir}/frontend/dist/"
    into "$buildDir/resources/main/static"
}

build {
    dependsOn 'npmBuild'
}